//输入
//第一行：第一个数字n表示总样本数目，其后跟n个样本；
//第二行：查找数据的位置
//第三行：插入新数据的位置、新的数据；
//第四行：被删除的数据的位置
#include<stdio.h>

#include<stdlib.h>


//定义节点结构体

struct node
	
{
	
		int data;//数据元素
	
		struct node* next;//指向下一个节点的指针
	
};

// 创建链表
struct node* createlist(int n)
{

	struct node* head = NULL;

	struct node* tail = NULL;
	int i;
	for (i = 0; i < n; i++)
	{

		struct node* newnode = (struct node*)malloc(sizeof(struct node));
		if (newnode == NULL)
			exit(1);


		int data;

		scanf_s("%d", &data);

		newnode->data = data;
		newnode->next = NULL;
		if (head == NULL)  

		{

			head = newnode;

			tail = newnode;
		}

		else
		{

			tail->next = newnode;

			tail = newnode;
		}
	}

	return head;
}
								
									
									
//查找
void search(struct node* head, int position)
{
	if (head == NULL)	//链表为空返回-1
	{
		printf("-1\n");
		return;
	}
	if (position <= 0)//位置超出指定范围返回-1
	{
		printf("-1\n");
		return;
	}
	int i;
	struct node* current = head;  //将head 给辅助变量current
	for (i = 1; i < position; i++)
	{
		if (current == NULL)  //位置超出范围返回-1
		{
			printf("-1\n");
			return;
		}
		current = current->next;  //更新节点位置
	}
	printf("%d\n", current->data);
		}
//插入
void insert(struct node** head, int position, int value)
{
	if (position <= 0)  //位置超出范围返回-2
	{
		printf("-2\n");
		return;
	}
	struct node* newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = value;
	newnode->next = NULL;

	if (position == 1)
	{
		newnode->next = *head;
		*head = newnode;
		return;
	}
	struct node* current = *head;
	int i;
	for (i = 1; i < position - 1; i++)
	{
		if (current == NULL)  //位置超出范围返回-2
		{
			printf("-2\n");
			free(newnode); //释放新节点内存
			return;
		}
		current = current->next;
	}
	if (current == NULL) //位置超出范围返回-2
	{
		printf("-2\n");
		free(newnode);  //释放新节点内存
		return;
	}
	newnode->next = current->next;
	current->next = newnode;
}

//删除
void delete_(struct node** head, int position)
{
	if (*head == NULL)//链表为空表返回-3
	{
		printf("-3\n");
		return;
	}
	if (position <= 0)//位置超出范围返回-3
	{
		printf("-3\n");
		return;
	}
	if (position == 1)
	{
		struct node* temp = *head;
		*head = (*head)->next;
		free(temp);
		return;
	}
	struct node* current = *head;
	int i;
	for (i = 1; i < position - 1; i++)
	{
		if (current == NULL)//位置超出范围返回-3
		{
			printf("-3\n");
			return;
		}
		current = current->next;
	}

	if (current == NULL || current->next == NULL)//位置超出范围返回-3
	{
		printf("-3\n");
		return;
	}
	struct node* temp = current->next;
	current->next = temp->next;
	free(temp);
}

//打印链表
void print(struct node* head)
{
	struct node* current = head;
	while (current != NULL)
	{
		printf("%d", current->data);
		current = current->next;

	}
	printf("\n");
}

int main()
{
	int n;
	scanf_s("%d", &n);
	struct node* head = createlist(n);
	int positiontofind;
	scanf_s("%d", &positiontofind);
	search(head, positiontofind);

	int positiontoinsert, value1;
	scanf_s("%d %d", &positiontoinsert, &value1);
	insert(&head, positiontoinsert, value1);
	print(head);

	int positiontodelete;
	scanf_s("%d", &positiontodelete);
	delete_(&head, positiontodelete);
	print(head);

	return 0;
}
